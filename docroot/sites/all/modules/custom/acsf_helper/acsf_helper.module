<?php
/**
 * @file
 * File description
 *
 * Long description
 */

/**
 * Implements hook_system_info_alter().
 * @param $info The .info file contents, passed by reference so that it can be altered.
 * @param $file Full information about the module or theme, including $file->name, and $file->filename.
 * @param $type Either 'module' or 'theme', depending on the type of .info file that was passed.
 */
function acsf_helper_system_info_alter(&$info, $file, $type) {
  // Remove the dependency on the ACSF_OPENID module.
  if (isset($info['project']) && $info['project'] == "acsf") {
    $search = array_search("acsf_openid", $info['dependencies']);
    if ($search !== FALSE && $info['dependencies'][$search] == "acsf_openid") {
      unset($info['dependencies'][$search]);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * @param $form Nested array of form elements that comprise the form.
 * @param $form_state A keyed array containing the current state of the form. The arguments that drupal_get_form() was originally called with are available in the array $form_state['build_info']['args'].
 * @param $form_id String representing the name of the form itself. Typically this is the name of the function that generated the form.
 */
function acsf_helper_form_system_modules_alter(&$form, &$form_state, $form_id) {
  unset($form['modules']['Core']['statistics']);
  unset($form['modules']['Other']['mollom']);
  unset($form['modules']['Services - servers']['xmlrpc_server']);
  unset($form['modules']['Stanford']['capx_webauth']);
  unset($form['modules']['Stanford']['stanford_metatag_nobots']);
  unset($form['modules']['Stanford']['stanford_webauth_block']);
  unset($form['modules']['Stanford']['webauth']);
  unset($form['modules']['Stanford']['webauth_extras']);
  unset($form['modules']['Stanford - ACSF']['acsf_helper']);
}

/**
 * Implements hook_menu().
 *
 * @return array An array of menu items.
 */
function acsf_helper_menu() {
  $items = [];
  $is_ah = getenv('AH_SITE_ENVIRONMENT');
  if ($is_ah) {
    $items['sites/default/files/%'] = array(
      'page callback' => 'acsf_sites_default_files_redirect',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
      'page arguments' => array(
        3,
      ),
    );
  }
  return $items;
}

/**
 * @param $arg1 string A menu path passed from acsf_helper_menu().
 *
 * Redirect requests for "sites/default/files/foo.pdf" to "sites/g/files/sbakbj5626/f/foo.pdf", dependent on the
 * "file_public_path" variable of the site.
 */
function acsf_sites_default_files_redirect($arg1) {
  $file_public_path = variable_get('file_public_path', 'sites/default/files');

  // If the public path is set to what we are trying to redirect to throw out
  // a 404 or you will get stuck in a redirect looooooooooooop.
  if ($file_public_path == "sites/default/files") {
    return MENU_NOT_FOUND;
  }

  $path = current_path();
  $new_file_path = preg_replace("/sites\/default\/files/", $file_public_path, $path);
  drupal_goto($new_file_path, array(), 301);
}

/**
 * Implements hook_module_implements_alter().
 *
 * Run Paranoia's form alters last. Allow Paranoia to have the final word.
 */
function acsf_helper_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && module_exists('paranoia')) {
    $group = $implementations['paranoia'];
    unset($implementations['paranoia']);
    $implementations['paranoia'] = $group;
  }
}

/**
 * Implements hook_page_build().
 *
 * Handles 404 redirect for the sites.stanford.edu site.
 *
 * We do this here rather than in hook_init() because we want redirect and
 * match_redirect to have a chance to act first.
 *
 * @param array &$page
 *   The page render array.
 */
function acsf_helper_page_build(array &$page) {
  // When a site is not found and a redirect is not found on
  // sites.stanford.edu/something-something we want to redirect to UIT page.
  global $conf;
  $headers = drupal_get_http_header();
  $is_ah = $_ENV['AH_SITE_GROUP'] ?? FALSE;
  // 7481 resolves to the site at sites.stanford.edu.
  $key_site_id = variable_get("acsf_helper_key_site_id", "7481");

  // If Drupal hits a 404, we should check to see if we are on a valid site.
  // When we are not, there is no site_id.
  // Perform this check only on the AH environment.
  if ($is_ah && isset($headers["status"]) && $headers["status"] == "404 Not Found") {
    if ($key_site_id == (string) $conf['gardens_site_id']) {
      header("Location:https://uit.stanford.edu/service/stanfordsites");
      drupal_exit();
    }
  }

}

/**
 * Implements hook_init().
 *
 * Force loading through canonical URL.
 */
function acsf_helper_init() {

  // If we are not on ACSF production, leave.
  if (!isset($_ENV['AH_SITE_ENVIRONMENT']) || $_ENV['AH_SITE_ENVIRONMENT'] !== '02live') {
    return;
  }

  // Get the canonical variable. NULL if nothing.
  // Clean up the variable: strip leading http:// or https://, and strip trailing slash, if present, so that we get
  // host.domain.tld
  $acsf_helper_canonical_url = preg_replace('/(^https?:\/\/|\/$)/', '', variable_get('acsf_helper_canonical_url', FALSE));

  // If we have already set the canonical URL or it's not set bail.
  if (!isset($_SERVER['HTTP_HOST']) || !$acsf_helper_canonical_url || check_plain($_SERVER['HTTP_HOST']) == $acsf_helper_canonical_url) {
    return;
  }

  // Skip for drush.
  if (drupal_is_cli()) {
    return;
  }

  // Redirect using the canonical url. Append the REQUEST_URI to the hostname.
  header('HTTP/1.0 301 Moved Permanently');
  $redirect_url = "https://" . $acsf_helper_canonical_url . check_plain($_SERVER['REQUEST_URI']);
  header("Location: " . $redirect_url);
  drupal_exit();
}
